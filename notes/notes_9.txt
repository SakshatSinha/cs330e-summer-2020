Python iterables must implement one special methods, __iter__(). 
the "__iter__" magic function is called, for example, 
when a for-loop starts or run a function like list.

Python iterator object must implement two special methods, 
__iter__() and __next__().

An object is called iterable if we can get an iterator from it. 
Most of built-in containers in Python like: list, tuple, string 
etc. are iterables.

The iter() function (which in turn calls the __iter__() method) 
returns an iterator from them.
-------------

Note:
#Given an iterable, x, using "if x" does not work for user-defined iterables. 
# Example.
class iterable: 
      def __iter__(self): 
          return iter([])
          
x = iterable()
if x :
   print("full")
else :
   print("empty")
# full

def a_for (x) :
   for a in x :
      print("inside for")

def a_while (x) :
    p = iter(x)
    try :
        while True :
            w = next(p)
            print("inside while")
    except StopIteration :
        pass

x = iterable()
a_for(x)
a_while(x)
cycle_for(x)   